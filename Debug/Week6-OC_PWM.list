
Week6-OC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d50  08003d50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d58  08003d58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08003d70  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003d70  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb7c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a75  00000000  00000000  0002bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f3a  00000000  00000000  0002eed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e27  00000000  00000000  00044e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d647  00000000  00000000  0004dc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000db2f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d20 	.word	0x08003d20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003d20 	.word	0x08003d20

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80004dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 fcf1 	bl	8000ec4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f853 	bl	800058c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 fa51 	bl	800098c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ea:	f000 fa25 	bl	8000938 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80004ee:	f000 f8b5 	bl	800065c <MX_ADC1_Init>
	MX_TIM1_Init();
 80004f2:	f000 f905 	bl	8000700 <MX_TIM1_Init>
	MX_TIM11_Init();
 80004f6:	f000 f9fb 	bl	80008f0 <MX_TIM11_Init>
	MX_TIM3_Init();
 80004fa:	f000 f9ab 	bl	8000854 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//ADC Start
		HAL_ADC_Start_IT(&hadc1);
 80004fe:	481c      	ldr	r0, [pc, #112]	; (8000570 <main+0x98>)
 8000500:	f000 fd96 	bl	8001030 <HAL_ADC_Start_IT>
		HAL_TIM_Base_Start(&htim3);
 8000504:	481b      	ldr	r0, [pc, #108]	; (8000574 <main+0x9c>)
 8000506:	f002 f918 	bl	800273a <HAL_TIM_Base_Start>

		HAL_TIM_Base_Start(&htim1);
 800050a:	481b      	ldr	r0, [pc, #108]	; (8000578 <main+0xa0>)
 800050c:	f002 f915 	bl	800273a <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000510:	2100      	movs	r1, #0
 8000512:	4819      	ldr	r0, [pc, #100]	; (8000578 <main+0xa0>)
 8000514:	f002 f98e 	bl	8002834 <HAL_TIM_PWM_Start>

		HAL_TIM_Base_Start_IT(&htim11);
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <main+0xa4>)
 800051a:	f002 f932 	bl	8002782 <HAL_TIM_Base_Start_IT>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//1 Khz Loop
		if (micros() - TimeOutputLoop > 1000) {
 800051e:	f000 fadf 	bl	8000ae0 <micros>
 8000522:	460a      	mov	r2, r1
 8000524:	4601      	mov	r1, r0
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <main+0xa8>)
 8000528:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800052c:	460b      	mov	r3, r1
 800052e:	4614      	mov	r4, r2
 8000530:	ebb3 030b 	subs.w	r3, r3, fp
 8000534:	eb64 040c 	sbc.w	r4, r4, ip
 8000538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	42a2      	cmp	r2, r4
 8000542:	bf08      	it	eq
 8000544:	4299      	cmpeq	r1, r3
 8000546:	d20b      	bcs.n	8000560 <main+0x88>
			TimeOutputLoop = micros();
 8000548:	f000 faca 	bl	8000ae0 <micros>
 800054c:	4603      	mov	r3, r0
 800054e:	460c      	mov	r4, r1
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <main+0xa8>)
 8000552:	e9c2 3400 	strd	r3, r4, [r2]
			// #001

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMOut);
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <main+0xac>)
 8000558:	881a      	ldrh	r2, [r3, #0]
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0xa0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	635a      	str	r2, [r3, #52]	; 0x34

		}

		if (ADCUpdateFlag) {
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <main+0xb0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0da      	beq.n	800051e <main+0x46>
			ADCUpdateFlag = 0;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <main+0xb0>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		if (micros() - TimeOutputLoop > 1000) {
 800056e:	e7d6      	b.n	800051e <main+0x46>
 8000570:	20000080 	.word	0x20000080
 8000574:	20000040 	.word	0x20000040
 8000578:	20000108 	.word	0x20000108
 800057c:	200000c8 	.word	0x200000c8
 8000580:	20000038 	.word	0x20000038
 8000584:	20000000 	.word	0x20000000
 8000588:	2000002c 	.word	0x2000002c

0800058c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fbb8 	bl	8003d10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fc05 	bl	8001e20 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
		Error_Handler();
 800061c:	f000 fa7a 	bl	8000b14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2103      	movs	r1, #3
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fe5f 	bl	8002300 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
		Error_Handler();
 8000648:	f000 fa64 	bl	8000b14 <Error_Handler>
	}
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <MX_ADC1_Init+0xa0>)
 8000672:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0x9c>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0x9c>)
 800068a:	2200      	movs	r2, #0
 800068c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006c2:	f000 fc71 	bl	8000fa8 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x74>
		Error_Handler();
 80006cc:	f000 fa22 	bl	8000b14 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0x9c>)
 80006e2:	f000 feb7 	bl	8001454 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x94>
		Error_Handler();
 80006ec:	f000 fa12 	bl	8000b14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000080 	.word	0x20000080
 80006fc:	40012000 	.word	0x40012000

08000700 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2220      	movs	r2, #32
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fae9 	bl	8003d10 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800073e:	4b43      	ldr	r3, [pc, #268]	; (800084c <MX_TIM1_Init+0x14c>)
 8000740:	4a43      	ldr	r2, [pc, #268]	; (8000850 <MX_TIM1_Init+0x150>)
 8000742:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 8000744:	4b41      	ldr	r3, [pc, #260]	; (800084c <MX_TIM1_Init+0x14c>)
 8000746:	2201      	movs	r2, #1
 8000748:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <MX_TIM1_Init+0x14c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 10000;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_TIM1_Init+0x14c>)
 8000752:	f242 7210 	movw	r2, #10000	; 0x2710
 8000756:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <MX_TIM1_Init+0x14c>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_TIM1_Init+0x14c>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_TIM1_Init+0x14c>)
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800076a:	4838      	ldr	r0, [pc, #224]	; (800084c <MX_TIM1_Init+0x14c>)
 800076c:	f001 ffba 	bl	80026e4 <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8000776:	f000 f9cd 	bl	8000b14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000780:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000784:	4619      	mov	r1, r3
 8000786:	4831      	ldr	r0, [pc, #196]	; (800084c <MX_TIM1_Init+0x14c>)
 8000788:	f002 fa54 	bl	8002c34 <HAL_TIM_ConfigClockSource>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x96>
		Error_Handler();
 8000792:	f000 f9bf 	bl	8000b14 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000796:	482d      	ldr	r0, [pc, #180]	; (800084c <MX_TIM1_Init+0x14c>)
 8000798:	f002 f817 	bl	80027ca <HAL_TIM_PWM_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 80007a2:	f000 f9b7 	bl	8000b14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80007ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b2:	4619      	mov	r1, r3
 80007b4:	4825      	ldr	r0, [pc, #148]	; (800084c <MX_TIM1_Init+0x14c>)
 80007b6:	f002 fde9 	bl	800338c <HAL_TIMEx_MasterConfigSynchronization>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80007c0:	f000 f9a8 	bl	8000b14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c4:	2360      	movs	r3, #96	; 0x60
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 5000;
 80007c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d2:	2300      	movs	r3, #0
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <MX_TIM1_Init+0x14c>)
 80007ec:	f002 f95c 	bl	8002aa8 <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80007f6:	f000 f98d 	bl	8000b14 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_TIM1_Init+0x14c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	699a      	ldr	r2, [r3, #24]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_TIM1_Init+0x14c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 0208 	bic.w	r2, r2, #8
 8000808:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x14c>)
 800082e:	f002 fe1b 	bl	8003468 <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000838:	f000 f96c 	bl	8000b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x14c>)
 800083e:	f000 fa3d 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3758      	adds	r7, #88	; 0x58
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000108 	.word	0x20000108
 8000850:	40010000 	.word	0x40010000

08000854 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_TIM3_Init+0x94>)
 8000872:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <MX_TIM3_Init+0x98>)
 8000874:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_TIM3_Init+0x94>)
 8000878:	2264      	movs	r2, #100	; 0x64
 800087a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_TIM3_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2000;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM3_Init+0x94>)
 8000884:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000888:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_TIM3_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM3_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <MX_TIM3_Init+0x94>)
 8000898:	f001 ff24 	bl	80026e4 <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80008a2:	f000 f937 	bl	8000b14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4619      	mov	r1, r3
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_TIM3_Init+0x94>)
 80008b4:	f002 f9be 	bl	8002c34 <HAL_TIM_ConfigClockSource>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80008be:	f000 f929 	bl	8000b14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c2:	2320      	movs	r3, #32
 80008c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_TIM3_Init+0x94>)
 80008d0:	f002 fd5c 	bl	800338c <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80008da:	f000 f91b 	bl	8000b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000040 	.word	0x20000040
 80008ec:	40000400 	.word	0x40000400

080008f0 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_TIM11_Init+0x40>)
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_TIM11_Init+0x44>)
 80008f8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 100;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_TIM11_Init+0x40>)
 80008fc:	2264      	movs	r2, #100	; 0x64
 80008fe:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_TIM11_Init+0x40>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_TIM11_Init+0x40>)
 8000908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090c:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_TIM11_Init+0x40>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_TIM11_Init+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_TIM11_Init+0x40>)
 800091c:	f001 fee2 	bl	80026e4 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM11_Init+0x3a>
		Error_Handler();
 8000926:	f000 f8f5 	bl	8000b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000c8 	.word	0x200000c8
 8000934:	40014800 	.word	0x40014800

08000938 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART2_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000970:	f002 fde0 	bl	8003534 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800097a:	f000 f8cb 	bl	8000b14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000148 	.word	0x20000148
 8000988:	40004400 	.word	0x40004400

0800098c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a2c      	ldr	r2, [pc, #176]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <MX_GPIO_Init+0xd0>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2120      	movs	r1, #32
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_GPIO_Init+0xd4>)
 8000a18:	f001 f9e8 	bl	8001dec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0xd8>)
 8000a24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_GPIO_Init+0xdc>)
 8000a32:	f001 f859 	bl	8001ae8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_GPIO_Init+0xd4>)
 8000a4e:	f001 f84b 	bl	8001ae8 <HAL_GPIO_Init>

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	10210000 	.word	0x10210000
 8000a68:	40020800 	.word	0x40020800

08000a6c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	ADCFeedBack = HAL_ADC_GetValue(&hadc1);
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <HAL_ADC_ConvCpltCallback+0x24>)
 8000a76:	f000 fccc 	bl	8001412 <HAL_ADC_GetValue>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a80:	801a      	strh	r2, [r3, #0]
	ADCUpdateFlag = 1;
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000080 	.word	0x20000080
 8000a94:	2000002e 	.word	0x2000002e
 8000a98:	2000002c 	.word	0x2000002c

08000a9c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a9c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d10d      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x2e>
		_micro += 65535;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ab0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000ab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	eb1b 0301 	adds.w	r3, fp, r1
 8000ac0:	eb4c 0402 	adc.w	r4, ip, r2
 8000ac4:	4a05      	ldr	r2, [pc, #20]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ac6:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200000c8 	.word	0x200000c8
 8000adc:	20000030 	.word	0x20000030

08000ae0 <micros>:

__inline__ uint64_t micros() {
 8000ae0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000ae4:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <micros+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <micros+0x30>)
 8000af4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000af8:	eb1b 0301 	adds.w	r3, fp, r1
 8000afc:	eb4c 0402 	adc.w	r4, ip, r2
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	4621      	mov	r1, r4
 8000b04:	46bd      	mov	sp, r7
 8000b06:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000b0a:	4770      	bx	lr
 8000b0c:	200000c8 	.word	0x200000c8
 8000b10:	20000030 	.word	0x20000030

08000b14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b1a:	e7fe      	b.n	8000b1a <Error_Handler+0x6>

08000b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f000 ff82 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <HAL_ADC_MspInit+0x8c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12f      	bne.n	8000bee <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_ADC_MspInit+0x90>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_ADC_MspInit+0x90>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_ADC_MspInit+0x90>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_ADC_MspInit+0x90>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_ADC_MspInit+0x90>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_ADC_MspInit+0x90>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_ADC_MspInit+0x94>)
 8000bda:	f000 ff85 	bl	8001ae8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2012      	movs	r0, #18
 8000be4:	f000 ff49 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000be8:	2012      	movs	r0, #18
 8000bea:	f000 ff62 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_TIM_Base_MspInit+0xa8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d116      	bne.n	8000c44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	201a      	movs	r0, #26
 8000c38:	f000 ff1f 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c3c:	201a      	movs	r0, #26
 8000c3e:	f000 ff38 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000c42:	e02e      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <HAL_TIM_Base_MspInit+0xb0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10e      	bne.n	8000c6c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
}
 8000c6a:	e01a      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_TIM_Base_MspInit+0xb4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d115      	bne.n	8000ca2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_TIM_Base_MspInit+0xac>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	201a      	movs	r0, #26
 8000c98:	f000 feef 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c9c:	201a      	movs	r0, #26
 8000c9e:	f000 ff08 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	40014800 	.word	0x40014800

08000cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <HAL_TIM_MspPostInit+0x68>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d11e      	bne.n	8000d1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_TIM_MspPostInit+0x70>)
 8000d18:	f000 fee6 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000da6:	f000 fe9f 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8ac 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <ADC_IRQHandler+0x10>)
 8000e1a:	f000 f9b9 	bl	8001190 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000080 	.word	0x20000080

08000e28 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000e2e:	f001 fd33 	bl	8002898 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000e34:	f001 fd30 	bl	8002898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000108 	.word	0x20000108
 8000e40:	200000c8 	.word	0x200000c8

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <SystemInit+0x28>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <SystemInit+0x28>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SystemInit+0x28>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
  ldr  r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e90:	f842 3b04 	str.w	r3, [r2], #4

08000e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd3 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 ff13 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb19 	bl	80004d8 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eac:	08003d60 	.word	0x08003d60
  ldr  r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eb4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000eb8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ebc:	2000018c 	.word	0x2000018c

08000ec0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <DMA1_Stream0_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 fdb9 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe10 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fdd1 	bl	8001ace <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 fd99 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	20000188 	.word	0x20000188

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000188 	.word	0x20000188

08000fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e033      	b.n	8001026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fdd0 	bl	8000b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d118      	bne.n	8001018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fee:	f023 0302 	bic.w	r3, r3, #2
 8000ff2:	f043 0202 	orr.w	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fb5c 	bl	80016b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
 8001016:	e001      	b.n	800101c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_ADC_Start_IT+0x1a>
 8001046:	2302      	movs	r3, #2
 8001048:	e094      	b.n	8001174 <HAL_ADC_Start_IT+0x144>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d018      	beq.n	8001092 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_ADC_Start_IT+0x150>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a43      	ldr	r2, [pc, #268]	; (8001184 <HAL_ADC_Start_IT+0x154>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9a      	lsrs	r2, r3, #18
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001084:	e002      	b.n	800108c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3b01      	subs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d168      	bne.n	8001172 <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010de:	d106      	bne.n	80010ee <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f023 0206 	bic.w	r2, r3, #6
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_ADC_Start_IT+0x158>)
 80010fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001108:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d11c      	bne.n	8001172 <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e013      	b.n	8001172 <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_ADC_Start_IT+0x15c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d10e      	bne.n	8001172 <HAL_ADC_Start_IT+0x142>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d107      	bne.n	8001172 <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001170:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000004 	.word	0x20000004
 8001184:	431bde83 	.word	0x431bde83
 8001188:	40012300 	.word	0x40012300
 800118c:	40012000 	.word	0x40012000

08001190 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d049      	beq.n	8001266 <HAL_ADC_IRQHandler+0xd6>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d046      	beq.n	8001266 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d12b      	bne.n	8001256 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d127      	bne.n	8001256 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800121e:	2b00      	cmp	r3, #0
 8001220:	d119      	bne.n	8001256 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0220 	bic.w	r2, r2, #32
 8001230:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fc08 	bl	8000a6c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f06f 0212 	mvn.w	r2, #18
 8001264:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b04      	cmp	r3, #4
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	2b80      	cmp	r3, #128	; 0x80
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d057      	beq.n	8001348 <HAL_ADC_IRQHandler+0x1b8>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d054      	beq.n	8001348 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d105      	bne.n	80012b6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d139      	bne.n	8001338 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d12b      	bne.n	8001338 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d124      	bne.n	8001338 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d11d      	bne.n	8001338 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001300:	2b00      	cmp	r3, #0
 8001302:	d119      	bne.n	8001338 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001312:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fab9 	bl	80018b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f06f 020c 	mvn.w	r2, #12
 8001346:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b01      	cmp	r3, #1
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d017      	beq.n	80013aa <HAL_ADC_IRQHandler+0x21a>
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d014      	beq.n	80013aa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10d      	bne.n	80013aa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f846 	bl	800142c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0201 	mvn.w	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d015      	beq.n	800140a <HAL_ADC_IRQHandler+0x27a>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f043 0202 	orr.w	r2, r3, #2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f06f 0220 	mvn.w	r2, #32
 80013f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f820 	bl	8001440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f06f 0220 	mvn.w	r2, #32
 8001408:	601a      	str	r2, [r3, #0]
  }
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1c>
 800146c:	2302      	movs	r3, #2
 800146e:	e113      	b.n	8001698 <HAL_ADC_ConfigChannel+0x244>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b09      	cmp	r3, #9
 800147e:	d925      	bls.n	80014cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68d9      	ldr	r1, [r3, #12]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	3b1e      	subs	r3, #30
 8001496:	2207      	movs	r2, #7
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43da      	mvns	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	400a      	ands	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68d9      	ldr	r1, [r3, #12]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4403      	add	r3, r0
 80014be:	3b1e      	subs	r3, #30
 80014c0:	409a      	lsls	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	e022      	b.n	8001512 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6919      	ldr	r1, [r3, #16]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	2207      	movs	r2, #7
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	4603      	mov	r3, r0
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4403      	add	r3, r0
 8001508:	409a      	lsls	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d824      	bhi.n	8001564 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b05      	subs	r3, #5
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b05      	subs	r3, #5
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	; 0x34
 8001562:	e04c      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d824      	bhi.n	80015b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3b23      	subs	r3, #35	; 0x23
 800157e:	221f      	movs	r2, #31
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43da      	mvns	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	400a      	ands	r2, r1
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b23      	subs	r3, #35	; 0x23
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
 80015b4:	e023      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b41      	subs	r3, #65	; 0x41
 80015c8:	221f      	movs	r2, #31
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	400a      	ands	r2, r1
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b41      	subs	r3, #65	; 0x41
 80015f2:	fa00 f203 	lsl.w	r2, r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_ADC_ConfigChannel+0x250>)
 8001600:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <HAL_ADC_ConfigChannel+0x254>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d10f      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1d8>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b12      	cmp	r3, #18
 8001612:	d10b      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_ADC_ConfigChannel+0x254>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12b      	bne.n	800168e <HAL_ADC_ConfigChannel+0x23a>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <HAL_ADC_ConfigChannel+0x258>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x1f4>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b11      	cmp	r3, #17
 8001646:	d122      	bne.n	800168e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_ADC_ConfigChannel+0x258>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d111      	bne.n	800168e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_ADC_ConfigChannel+0x25c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_ADC_ConfigChannel+0x260>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0c9a      	lsrs	r2, r3, #18
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001680:	e002      	b.n	8001688 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3b01      	subs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40012300 	.word	0x40012300
 80016a8:	40012000 	.word	0x40012000
 80016ac:	10000012 	.word	0x10000012
 80016b0:	20000004 	.word	0x20000004
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c0:	4b79      	ldr	r3, [pc, #484]	; (80018a8 <ADC_Init+0x1f0>)
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	431a      	orrs	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	021a      	lsls	r2, r3, #8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001710:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	4a58      	ldr	r2, [pc, #352]	; (80018ac <ADC_Init+0x1f4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d022      	beq.n	8001796 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800175e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001780:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e00f      	b.n	80017b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0202 	bic.w	r2, r2, #2
 80017c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7e1b      	ldrb	r3, [r3, #24]
 80017d0:	005a      	lsls	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01b      	beq.n	800181c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001802:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6859      	ldr	r1, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	3b01      	subs	r3, #1
 8001810:	035a      	lsls	r2, r3, #13
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	e007      	b.n	800182c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	3b01      	subs	r3, #1
 8001848:	051a      	lsls	r2, r3, #20
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800186e:	025a      	lsls	r2, r3, #9
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	029a      	lsls	r2, r3, #10
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	609a      	str	r2, [r3, #8]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40012300 	.word	0x40012300
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e159      	b.n	8001db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8148 	bne.w	8001db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d00b      	beq.n	8001b42 <HAL_GPIO_Init+0x5a>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b36:	2b11      	cmp	r3, #17
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0xfc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d123      	bne.n	8001c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80a2 	beq.w	8001db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a55      	ldr	r2, [pc, #340]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_GPIO_Init+0x2e4>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8a:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_GPIO_Init+0x2ec>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x202>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <HAL_GPIO_Init+0x2f0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x1fe>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <HAL_GPIO_Init+0x2f4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x1fa>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <HAL_GPIO_Init+0x2f8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x1f6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <HAL_GPIO_Init+0x2fc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x1f2>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e008      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e004      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x204>
 8001cea:	2300      	movs	r3, #0
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cfc:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <HAL_GPIO_Init+0x2e8>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d82:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_GPIO_Init+0x300>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	f67f aea2 	bls.w	8001b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3724      	adds	r7, #36	; 0x24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e25b      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	4ba3      	ldr	r3, [pc, #652]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d00c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4ba0      	ldr	r3, [pc, #640]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4b9d      	ldr	r3, [pc, #628]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4b99      	ldr	r3, [pc, #612]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x108>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d157      	bne.n	8001f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e236      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x74>
 8001e86:	4b91      	ldr	r3, [pc, #580]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a90      	ldr	r2, [pc, #576]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a8a      	ldr	r2, [pc, #552]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a87      	ldr	r2, [pc, #540]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	4b84      	ldr	r3, [pc, #528]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a83      	ldr	r2, [pc, #524]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b81      	ldr	r3, [pc, #516]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a80      	ldr	r2, [pc, #512]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f85a 	bl	8000f90 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f856 	bl	8000f90 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1fb      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xc0>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff f846 	bl	8000f90 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff f842 	bl	8000f90 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1e7      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0xe8>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	4b65      	ldr	r3, [pc, #404]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b62      	ldr	r3, [pc, #392]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x152>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1bb      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4952      	ldr	r1, [pc, #328]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <HAL_RCC_OscConfig+0x2b0>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fffb 	bl	8000f90 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fff7 	bl	8000f90 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e19c      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4940      	ldr	r1, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <HAL_RCC_OscConfig+0x2b0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe ffda 	bl	8000f90 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7fe ffd6 	bl	8000f90 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e17b      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d030      	beq.n	800206c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x2b4>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe ffba 	bl	8000f90 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe ffb6 	bl	8000f90 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e15b      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x200>
 800203e:	e015      	b.n	800206c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x2b4>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7fe ffa3 	bl	8000f90 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204e:	f7fe ff9f 	bl	8000f90 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e144      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80a0 	beq.w	80021ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_RCC_OscConfig+0x2ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x2b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d121      	bne.n	80020fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_RCC_OscConfig+0x2b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_RCC_OscConfig+0x2b8>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe ff65 	bl	8000f90 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e011      	b.n	80020ee <HAL_RCC_OscConfig+0x2ce>
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470000 	.word	0x42470000
 80020d4:	42470e80 	.word	0x42470e80
 80020d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe ff58 	bl	8000f90 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0fd      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x4d4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d106      	bne.n	8002110 <HAL_RCC_OscConfig+0x2f0>
 8002102:	4b7d      	ldr	r3, [pc, #500]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a7c      	ldr	r2, [pc, #496]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x32a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x312>
 8002118:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a76      	ldr	r2, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	4b74      	ldr	r3, [pc, #464]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a73      	ldr	r2, [pc, #460]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x32a>
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a70      	ldr	r2, [pc, #448]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	4b6e      	ldr	r3, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe ff1d 	bl	8000f90 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe ff19 	bl	8000f90 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0bc      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x33a>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe ff07 	bl	8000f90 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe ff03 	bl	8000f90 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0a6      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8092 	beq.w	80022e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d05c      	beq.n	800228a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d141      	bne.n	800225c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b48      	ldr	r3, [pc, #288]	; (80022fc <HAL_RCC_OscConfig+0x4dc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fed7 	bl	8000f90 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fed3 	bl	8000f90 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e078      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	019b      	lsls	r3, r3, #6
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	061b      	lsls	r3, r3, #24
 8002228:	4933      	ldr	r1, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4dc>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe feac 	bl	8000f90 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fea8 	bl	8000f90 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04d      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x41c>
 800225a:	e045      	b.n	80022e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x4dc>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fe95 	bl	8000f90 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fe91 	bl	8000f90 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e036      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x44a>
 8002288:	e02e      	b.n	80022e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e029      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_RCC_OscConfig+0x4d8>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d115      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40007000 	.word	0x40007000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470060 	.word	0x42470060

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fdce 	bl	8000f90 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fdca 	bl	8000f90 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4601      	mov	r1, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	fa21 f303 	lsr.w	r3, r1, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fd2e 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08003d38 	.word	0x08003d38
 80024c4:	20000004 	.word	0x20000004
 80024c8:	20000008 	.word	0x20000008

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d007      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x32>
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d008      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x38>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80b4 	bne.w	8002660 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024fa:	60bb      	str	r3, [r7, #8]
       break;
 80024fc:	e0b3      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fe:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002500:	60bb      	str	r3, [r7, #8]
      break;
 8002502:	e0b0      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002504:	4b5a      	ldr	r3, [pc, #360]	; (8002670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800250c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250e:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d04a      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b55      	ldr	r3, [pc, #340]	; (8002670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	f04f 0400 	mov.w	r4, #0
 8002524:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	ea03 0501 	and.w	r5, r3, r1
 8002530:	ea04 0602 	and.w	r6, r4, r2
 8002534:	4629      	mov	r1, r5
 8002536:	4632      	mov	r2, r6
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	f04f 0400 	mov.w	r4, #0
 8002540:	0154      	lsls	r4, r2, #5
 8002542:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002546:	014b      	lsls	r3, r1, #5
 8002548:	4619      	mov	r1, r3
 800254a:	4622      	mov	r2, r4
 800254c:	1b49      	subs	r1, r1, r5
 800254e:	eb62 0206 	sbc.w	r2, r2, r6
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	f04f 0400 	mov.w	r4, #0
 800255a:	0194      	lsls	r4, r2, #6
 800255c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002560:	018b      	lsls	r3, r1, #6
 8002562:	1a5b      	subs	r3, r3, r1
 8002564:	eb64 0402 	sbc.w	r4, r4, r2
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	00e2      	lsls	r2, r4, #3
 8002572:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002576:	00d9      	lsls	r1, r3, #3
 8002578:	460b      	mov	r3, r1
 800257a:	4614      	mov	r4, r2
 800257c:	195b      	adds	r3, r3, r5
 800257e:	eb44 0406 	adc.w	r4, r4, r6
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	0262      	lsls	r2, r4, #9
 800258c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002590:	0259      	lsls	r1, r3, #9
 8002592:	460b      	mov	r3, r1
 8002594:	4614      	mov	r4, r2
 8002596:	4618      	mov	r0, r3
 8002598:	4621      	mov	r1, r4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	f7fd fe18 	bl	80001d8 <__aeabi_uldivmod>
 80025a8:	4603      	mov	r3, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	e049      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	ea03 0501 	and.w	r5, r3, r1
 80025c6:	ea04 0602 	and.w	r6, r4, r2
 80025ca:	4629      	mov	r1, r5
 80025cc:	4632      	mov	r2, r6
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	f04f 0400 	mov.w	r4, #0
 80025d6:	0154      	lsls	r4, r2, #5
 80025d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025dc:	014b      	lsls	r3, r1, #5
 80025de:	4619      	mov	r1, r3
 80025e0:	4622      	mov	r2, r4
 80025e2:	1b49      	subs	r1, r1, r5
 80025e4:	eb62 0206 	sbc.w	r2, r2, r6
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	0194      	lsls	r4, r2, #6
 80025f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025f6:	018b      	lsls	r3, r1, #6
 80025f8:	1a5b      	subs	r3, r3, r1
 80025fa:	eb64 0402 	sbc.w	r4, r4, r2
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	00e2      	lsls	r2, r4, #3
 8002608:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800260c:	00d9      	lsls	r1, r3, #3
 800260e:	460b      	mov	r3, r1
 8002610:	4614      	mov	r4, r2
 8002612:	195b      	adds	r3, r3, r5
 8002614:	eb44 0406 	adc.w	r4, r4, r6
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	02a2      	lsls	r2, r4, #10
 8002622:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002626:	0299      	lsls	r1, r3, #10
 8002628:	460b      	mov	r3, r1
 800262a:	4614      	mov	r4, r2
 800262c:	4618      	mov	r0, r3
 800262e:	4621      	mov	r1, r4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f04f 0400 	mov.w	r4, #0
 8002636:	461a      	mov	r2, r3
 8002638:	4623      	mov	r3, r4
 800263a:	f7fd fdcd 	bl	80001d8 <__aeabi_uldivmod>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	60bb      	str	r3, [r7, #8]
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002662:	60bb      	str	r3, [r7, #8]
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	68bb      	ldr	r3, [r7, #8]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	00f42400 	.word	0x00f42400
 8002678:	007a1200 	.word	0x007a1200

0800267c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 800269c:	4601      	mov	r1, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4a03      	ldr	r2, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08003d48 	.word	0x08003d48

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffdc 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026c4:	4601      	mov	r1, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	08003d48 	.word	0x08003d48

080026e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e01d      	b.n	8002732 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fa7a 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f000 fb66 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b06      	cmp	r3, #6
 800275a:	d007      	beq.n	800276c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b06      	cmp	r3, #6
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e01d      	b.n	8002818 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f815 	bl	8002820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 faf3 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fd7a 	bl	8003340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_TIM_PWM_Start+0x60>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d107      	bne.n	8002866 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d007      	beq.n	8002888 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000

08002898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0202 	mvn.w	r2, #2
 80028c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa6b 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa5d 	bl	8002da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fa6e 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d122      	bne.n	8002948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d11b      	bne.n	8002948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0204 	mvn.w	r2, #4
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa41 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa33 	bl	8002da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fa44 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b08      	cmp	r3, #8
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0208 	mvn.w	r2, #8
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa17 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa09 	bl	8002da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fa1a 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0210 	mvn.w	r2, #16
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2208      	movs	r2, #8
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f9ed 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9df 	bl	8002da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f9f0 	bl	8002dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10e      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0201 	mvn.w	r2, #1
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f840 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d107      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fd6c 	bl	8003520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d10e      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d107      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9b5 	bl	8002dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d107      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0220 	mvn.w	r2, #32
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fd36 	bl	800350c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0b4      	b.n	8002c2c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	f200 809f 	bhi.w	8002c18 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002c19 	.word	0x08002c19
 8002ae8:	08002c19 	.word	0x08002c19
 8002aec:	08002c19 	.word	0x08002c19
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002c19 	.word	0x08002c19
 8002af8:	08002c19 	.word	0x08002c19
 8002afc:	08002c19 	.word	0x08002c19
 8002b00:	08002b97 	.word	0x08002b97
 8002b04:	08002c19 	.word	0x08002c19
 8002b08:	08002c19 	.word	0x08002c19
 8002b0c:	08002c19 	.word	0x08002c19
 8002b10:	08002bd7 	.word	0x08002bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f9ea 	bl	8002ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6999      	ldr	r1, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	619a      	str	r2, [r3, #24]
      break;
 8002b52:	e062      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fa30 	bl	8002fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
      break;
 8002b94:	e041      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fa7b 	bl	8003098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0204 	bic.w	r2, r2, #4
 8002bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	61da      	str	r2, [r3, #28]
      break;
 8002bd4:	e021      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fac5 	bl	800316c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	61da      	str	r2, [r3, #28]
      break;
 8002c16:	e000      	b.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002c18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIM_ConfigClockSource+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0a6      	b.n	8002d9a <HAL_TIM_ConfigClockSource+0x166>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d067      	beq.n	8002d54 <HAL_TIM_ConfigClockSource+0x120>
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d80b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x6c>
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d073      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x140>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d802      	bhi.n	8002c96 <HAL_TIM_ConfigClockSource+0x62>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d06f      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c94:	e078      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d06c      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x140>
 8002c9a:	2b30      	cmp	r3, #48	; 0x30
 8002c9c:	d06a      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c9e:	e073      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0x8c>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d804      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ca8:	2b50      	cmp	r3, #80	; 0x50
 8002caa:	d033      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0xe0>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d041      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cb0:	e06a      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d066      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x152>
 8002cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbc:	d017      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cbe:	e063      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f000 fb16 	bl	8003300 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e04c      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f000 faff 	bl	8003300 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d10:	609a      	str	r2, [r3, #8]
      break;
 8002d12:	e039      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f000 fa73 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2150      	movs	r1, #80	; 0x50
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 facc 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8002d32:	e029      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f000 fa92 	bl	800326a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2160      	movs	r1, #96	; 0x60
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fabc 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8002d52:	e019      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f000 fa53 	bl	800320c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 faac 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8002d72:	e009      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f000 faa3 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8002d84:	e000      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <TIM_Base_SetConfig+0xe4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00f      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d00b      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a31      	ldr	r2, [pc, #196]	; (8002edc <TIM_Base_SetConfig+0xe8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a30      	ldr	r2, [pc, #192]	; (8002ee0 <TIM_Base_SetConfig+0xec>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <TIM_Base_SetConfig+0xf0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d108      	bne.n	8002e3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <TIM_Base_SetConfig+0xe4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01b      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d017      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <TIM_Base_SetConfig+0xe8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <TIM_Base_SetConfig+0xec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00f      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <TIM_Base_SetConfig+0xf0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <TIM_Base_SetConfig+0xf4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <TIM_Base_SetConfig+0xf8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <TIM_Base_SetConfig+0xfc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <TIM_Base_SetConfig+0xe4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d103      	bne.n	8002ec4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	615a      	str	r2, [r3, #20]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800

08002ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <TIM_OC1_SetConfig+0xc8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10c      	bne.n	8002f6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0308 	bic.w	r3, r3, #8
 8002f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <TIM_OC1_SetConfig+0xc8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40010000 	.word	0x40010000

08002fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0210 	bic.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0320 	bic.w	r3, r3, #32
 800300a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <TIM_OC2_SetConfig+0xd4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10d      	bne.n	800303c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <TIM_OC2_SetConfig+0xd4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d113      	bne.n	800306c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800304a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000

08003098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <TIM_OC3_SetConfig+0xd0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10d      	bne.n	8003112 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <TIM_OC3_SetConfig+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d113      	bne.n	8003142 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40010000 	.word	0x40010000

0800316c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a10      	ldr	r2, [pc, #64]	; (8003208 <TIM_OC4_SetConfig+0x9c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d109      	bne.n	80031e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000

0800320c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 030a 	bic.w	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0210 	bic.w	r2, r3, #16
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	031b      	lsls	r3, r3, #12
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f043 0307 	orr.w	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	431a      	orrs	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2201      	movs	r2, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e050      	b.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d018      	beq.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d013      	beq.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a16      	ldr	r2, [pc, #88]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d10c      	bne.n	8003434 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	4313      	orrs	r3, r2
 800342a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800
 8003460:	40000c00 	.word	0x40000c00
 8003464:	40014000 	.word	0x40014000

08003468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003480:	2302      	movs	r3, #2
 8003482:	e03d      	b.n	8003500 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e03f      	b.n	80035c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd fbe8 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f829 	bl	80035d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800358c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800359c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003612:	f023 030c 	bic.w	r3, r3, #12
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	430b      	orrs	r3, r1
 800361e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	f040 818b 	bne.w	8003958 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4ac1      	ldr	r2, [pc, #772]	; (800394c <UART_SetConfig+0x37c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d005      	beq.n	8003658 <UART_SetConfig+0x88>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4abf      	ldr	r2, [pc, #764]	; (8003950 <UART_SetConfig+0x380>)
 8003652:	4293      	cmp	r3, r2
 8003654:	f040 80bd 	bne.w	80037d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003658:	f7ff f830 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 800365c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	461d      	mov	r5, r3
 8003662:	f04f 0600 	mov.w	r6, #0
 8003666:	46a8      	mov	r8, r5
 8003668:	46b1      	mov	r9, r6
 800366a:	eb18 0308 	adds.w	r3, r8, r8
 800366e:	eb49 0409 	adc.w	r4, r9, r9
 8003672:	4698      	mov	r8, r3
 8003674:	46a1      	mov	r9, r4
 8003676:	eb18 0805 	adds.w	r8, r8, r5
 800367a:	eb49 0906 	adc.w	r9, r9, r6
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800368a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800368e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003692:	4688      	mov	r8, r1
 8003694:	4691      	mov	r9, r2
 8003696:	eb18 0005 	adds.w	r0, r8, r5
 800369a:	eb49 0106 	adc.w	r1, r9, r6
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	461d      	mov	r5, r3
 80036a4:	f04f 0600 	mov.w	r6, #0
 80036a8:	196b      	adds	r3, r5, r5
 80036aa:	eb46 0406 	adc.w	r4, r6, r6
 80036ae:	461a      	mov	r2, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	f7fc fd91 	bl	80001d8 <__aeabi_uldivmod>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	461a      	mov	r2, r3
 80036bc:	4ba5      	ldr	r3, [pc, #660]	; (8003954 <UART_SetConfig+0x384>)
 80036be:	fba3 2302 	umull	r2, r3, r3, r2
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	461d      	mov	r5, r3
 80036cc:	f04f 0600 	mov.w	r6, #0
 80036d0:	46a9      	mov	r9, r5
 80036d2:	46b2      	mov	sl, r6
 80036d4:	eb19 0309 	adds.w	r3, r9, r9
 80036d8:	eb4a 040a 	adc.w	r4, sl, sl
 80036dc:	4699      	mov	r9, r3
 80036de:	46a2      	mov	sl, r4
 80036e0:	eb19 0905 	adds.w	r9, r9, r5
 80036e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036fc:	4689      	mov	r9, r1
 80036fe:	4692      	mov	sl, r2
 8003700:	eb19 0005 	adds.w	r0, r9, r5
 8003704:	eb4a 0106 	adc.w	r1, sl, r6
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	461d      	mov	r5, r3
 800370e:	f04f 0600 	mov.w	r6, #0
 8003712:	196b      	adds	r3, r5, r5
 8003714:	eb46 0406 	adc.w	r4, r6, r6
 8003718:	461a      	mov	r2, r3
 800371a:	4623      	mov	r3, r4
 800371c:	f7fc fd5c 	bl	80001d8 <__aeabi_uldivmod>
 8003720:	4603      	mov	r3, r0
 8003722:	460c      	mov	r4, r1
 8003724:	461a      	mov	r2, r3
 8003726:	4b8b      	ldr	r3, [pc, #556]	; (8003954 <UART_SetConfig+0x384>)
 8003728:	fba3 1302 	umull	r1, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2164      	movs	r1, #100	; 0x64
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	3332      	adds	r3, #50	; 0x32
 800373a:	4a86      	ldr	r2, [pc, #536]	; (8003954 <UART_SetConfig+0x384>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003748:	4498      	add	r8, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	461d      	mov	r5, r3
 800374e:	f04f 0600 	mov.w	r6, #0
 8003752:	46a9      	mov	r9, r5
 8003754:	46b2      	mov	sl, r6
 8003756:	eb19 0309 	adds.w	r3, r9, r9
 800375a:	eb4a 040a 	adc.w	r4, sl, sl
 800375e:	4699      	mov	r9, r3
 8003760:	46a2      	mov	sl, r4
 8003762:	eb19 0905 	adds.w	r9, r9, r5
 8003766:	eb4a 0a06 	adc.w	sl, sl, r6
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003776:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800377a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800377e:	4689      	mov	r9, r1
 8003780:	4692      	mov	sl, r2
 8003782:	eb19 0005 	adds.w	r0, r9, r5
 8003786:	eb4a 0106 	adc.w	r1, sl, r6
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	461d      	mov	r5, r3
 8003790:	f04f 0600 	mov.w	r6, #0
 8003794:	196b      	adds	r3, r5, r5
 8003796:	eb46 0406 	adc.w	r4, r6, r6
 800379a:	461a      	mov	r2, r3
 800379c:	4623      	mov	r3, r4
 800379e:	f7fc fd1b 	bl	80001d8 <__aeabi_uldivmod>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <UART_SetConfig+0x384>)
 80037aa:	fba3 1302 	umull	r1, r3, r3, r2
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2164      	movs	r1, #100	; 0x64
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	3332      	adds	r3, #50	; 0x32
 80037bc:	4a65      	ldr	r2, [pc, #404]	; (8003954 <UART_SetConfig+0x384>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 0207 	and.w	r2, r3, #7
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4442      	add	r2, r8
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	e26f      	b.n	8003cb2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7fe ff5f 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 80037d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	461d      	mov	r5, r3
 80037dc:	f04f 0600 	mov.w	r6, #0
 80037e0:	46a8      	mov	r8, r5
 80037e2:	46b1      	mov	r9, r6
 80037e4:	eb18 0308 	adds.w	r3, r8, r8
 80037e8:	eb49 0409 	adc.w	r4, r9, r9
 80037ec:	4698      	mov	r8, r3
 80037ee:	46a1      	mov	r9, r4
 80037f0:	eb18 0805 	adds.w	r8, r8, r5
 80037f4:	eb49 0906 	adc.w	r9, r9, r6
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003804:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003808:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800380c:	4688      	mov	r8, r1
 800380e:	4691      	mov	r9, r2
 8003810:	eb18 0005 	adds.w	r0, r8, r5
 8003814:	eb49 0106 	adc.w	r1, r9, r6
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	461d      	mov	r5, r3
 800381e:	f04f 0600 	mov.w	r6, #0
 8003822:	196b      	adds	r3, r5, r5
 8003824:	eb46 0406 	adc.w	r4, r6, r6
 8003828:	461a      	mov	r2, r3
 800382a:	4623      	mov	r3, r4
 800382c:	f7fc fcd4 	bl	80001d8 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	461a      	mov	r2, r3
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <UART_SetConfig+0x384>)
 8003838:	fba3 2302 	umull	r2, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	461d      	mov	r5, r3
 8003846:	f04f 0600 	mov.w	r6, #0
 800384a:	46a9      	mov	r9, r5
 800384c:	46b2      	mov	sl, r6
 800384e:	eb19 0309 	adds.w	r3, r9, r9
 8003852:	eb4a 040a 	adc.w	r4, sl, sl
 8003856:	4699      	mov	r9, r3
 8003858:	46a2      	mov	sl, r4
 800385a:	eb19 0905 	adds.w	r9, r9, r5
 800385e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800386e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003872:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003876:	4689      	mov	r9, r1
 8003878:	4692      	mov	sl, r2
 800387a:	eb19 0005 	adds.w	r0, r9, r5
 800387e:	eb4a 0106 	adc.w	r1, sl, r6
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	461d      	mov	r5, r3
 8003888:	f04f 0600 	mov.w	r6, #0
 800388c:	196b      	adds	r3, r5, r5
 800388e:	eb46 0406 	adc.w	r4, r6, r6
 8003892:	461a      	mov	r2, r3
 8003894:	4623      	mov	r3, r4
 8003896:	f7fc fc9f 	bl	80001d8 <__aeabi_uldivmod>
 800389a:	4603      	mov	r3, r0
 800389c:	460c      	mov	r4, r1
 800389e:	461a      	mov	r2, r3
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <UART_SetConfig+0x384>)
 80038a2:	fba3 1302 	umull	r1, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2164      	movs	r1, #100	; 0x64
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	3332      	adds	r3, #50	; 0x32
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <UART_SetConfig+0x384>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038c2:	4498      	add	r8, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	461d      	mov	r5, r3
 80038c8:	f04f 0600 	mov.w	r6, #0
 80038cc:	46a9      	mov	r9, r5
 80038ce:	46b2      	mov	sl, r6
 80038d0:	eb19 0309 	adds.w	r3, r9, r9
 80038d4:	eb4a 040a 	adc.w	r4, sl, sl
 80038d8:	4699      	mov	r9, r3
 80038da:	46a2      	mov	sl, r4
 80038dc:	eb19 0905 	adds.w	r9, r9, r5
 80038e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038f8:	4689      	mov	r9, r1
 80038fa:	4692      	mov	sl, r2
 80038fc:	eb19 0005 	adds.w	r0, r9, r5
 8003900:	eb4a 0106 	adc.w	r1, sl, r6
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	461d      	mov	r5, r3
 800390a:	f04f 0600 	mov.w	r6, #0
 800390e:	196b      	adds	r3, r5, r5
 8003910:	eb46 0406 	adc.w	r4, r6, r6
 8003914:	461a      	mov	r2, r3
 8003916:	4623      	mov	r3, r4
 8003918:	f7fc fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800391c:	4603      	mov	r3, r0
 800391e:	460c      	mov	r4, r1
 8003920:	461a      	mov	r2, r3
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <UART_SetConfig+0x384>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <UART_SetConfig+0x384>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4442      	add	r2, r8
 8003948:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800394a:	e1b2      	b.n	8003cb2 <UART_SetConfig+0x6e2>
 800394c:	40011000 	.word	0x40011000
 8003950:	40011400 	.word	0x40011400
 8003954:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4ad7      	ldr	r2, [pc, #860]	; (8003cbc <UART_SetConfig+0x6ec>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d005      	beq.n	800396e <UART_SetConfig+0x39e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4ad6      	ldr	r2, [pc, #856]	; (8003cc0 <UART_SetConfig+0x6f0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	f040 80d1 	bne.w	8003b10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800396e:	f7fe fea5 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8003972:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	469a      	mov	sl, r3
 8003978:	f04f 0b00 	mov.w	fp, #0
 800397c:	46d0      	mov	r8, sl
 800397e:	46d9      	mov	r9, fp
 8003980:	eb18 0308 	adds.w	r3, r8, r8
 8003984:	eb49 0409 	adc.w	r4, r9, r9
 8003988:	4698      	mov	r8, r3
 800398a:	46a1      	mov	r9, r4
 800398c:	eb18 080a 	adds.w	r8, r8, sl
 8003990:	eb49 090b 	adc.w	r9, r9, fp
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039a8:	4688      	mov	r8, r1
 80039aa:	4691      	mov	r9, r2
 80039ac:	eb1a 0508 	adds.w	r5, sl, r8
 80039b0:	eb4b 0609 	adc.w	r6, fp, r9
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	f04f 0400 	mov.w	r4, #0
 80039c6:	0094      	lsls	r4, r2, #2
 80039c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039cc:	008b      	lsls	r3, r1, #2
 80039ce:	461a      	mov	r2, r3
 80039d0:	4623      	mov	r3, r4
 80039d2:	4628      	mov	r0, r5
 80039d4:	4631      	mov	r1, r6
 80039d6:	f7fc fbff 	bl	80001d8 <__aeabi_uldivmod>
 80039da:	4603      	mov	r3, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	461a      	mov	r2, r3
 80039e0:	4bb8      	ldr	r3, [pc, #736]	; (8003cc4 <UART_SetConfig+0x6f4>)
 80039e2:	fba3 2302 	umull	r2, r3, r3, r2
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	469b      	mov	fp, r3
 80039f0:	f04f 0c00 	mov.w	ip, #0
 80039f4:	46d9      	mov	r9, fp
 80039f6:	46e2      	mov	sl, ip
 80039f8:	eb19 0309 	adds.w	r3, r9, r9
 80039fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003a00:	4699      	mov	r9, r3
 8003a02:	46a2      	mov	sl, r4
 8003a04:	eb19 090b 	adds.w	r9, r9, fp
 8003a08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a20:	4689      	mov	r9, r1
 8003a22:	4692      	mov	sl, r2
 8003a24:	eb1b 0509 	adds.w	r5, fp, r9
 8003a28:	eb4c 060a 	adc.w	r6, ip, sl
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	0094      	lsls	r4, r2, #2
 8003a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	461a      	mov	r2, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	4631      	mov	r1, r6
 8003a4e:	f7fc fbc3 	bl	80001d8 <__aeabi_uldivmod>
 8003a52:	4603      	mov	r3, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b9a      	ldr	r3, [pc, #616]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2164      	movs	r1, #100	; 0x64
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	; 0x32
 8003a6c:	4a95      	ldr	r2, [pc, #596]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a78:	4498      	add	r8, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	469b      	mov	fp, r3
 8003a7e:	f04f 0c00 	mov.w	ip, #0
 8003a82:	46d9      	mov	r9, fp
 8003a84:	46e2      	mov	sl, ip
 8003a86:	eb19 0309 	adds.w	r3, r9, r9
 8003a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a8e:	4699      	mov	r9, r3
 8003a90:	46a2      	mov	sl, r4
 8003a92:	eb19 090b 	adds.w	r9, r9, fp
 8003a96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aae:	4689      	mov	r9, r1
 8003ab0:	4692      	mov	sl, r2
 8003ab2:	eb1b 0509 	adds.w	r5, fp, r9
 8003ab6:	eb4c 060a 	adc.w	r6, ip, sl
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	0094      	lsls	r4, r2, #2
 8003ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ad2:	008b      	lsls	r3, r1, #2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	4631      	mov	r1, r6
 8003adc:	f7fc fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b77      	ldr	r3, [pc, #476]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	3332      	adds	r3, #50	; 0x32
 8003afa:	4a72      	ldr	r2, [pc, #456]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4442      	add	r2, r8
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	e0d0      	b.n	8003cb2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7fe fdc0 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003b14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	469a      	mov	sl, r3
 8003b1a:	f04f 0b00 	mov.w	fp, #0
 8003b1e:	46d0      	mov	r8, sl
 8003b20:	46d9      	mov	r9, fp
 8003b22:	eb18 0308 	adds.w	r3, r8, r8
 8003b26:	eb49 0409 	adc.w	r4, r9, r9
 8003b2a:	4698      	mov	r8, r3
 8003b2c:	46a1      	mov	r9, r4
 8003b2e:	eb18 080a 	adds.w	r8, r8, sl
 8003b32:	eb49 090b 	adc.w	r9, r9, fp
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b4a:	4688      	mov	r8, r1
 8003b4c:	4691      	mov	r9, r2
 8003b4e:	eb1a 0508 	adds.w	r5, sl, r8
 8003b52:	eb4b 0609 	adc.w	r6, fp, r9
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f04f 0400 	mov.w	r4, #0
 8003b68:	0094      	lsls	r4, r2, #2
 8003b6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b6e:	008b      	lsls	r3, r1, #2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	4628      	mov	r0, r5
 8003b76:	4631      	mov	r1, r6
 8003b78:	f7fc fb2e 	bl	80001d8 <__aeabi_uldivmod>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b50      	ldr	r3, [pc, #320]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003b84:	fba3 2302 	umull	r2, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	469b      	mov	fp, r3
 8003b92:	f04f 0c00 	mov.w	ip, #0
 8003b96:	46d9      	mov	r9, fp
 8003b98:	46e2      	mov	sl, ip
 8003b9a:	eb19 0309 	adds.w	r3, r9, r9
 8003b9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003ba2:	4699      	mov	r9, r3
 8003ba4:	46a2      	mov	sl, r4
 8003ba6:	eb19 090b 	adds.w	r9, r9, fp
 8003baa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bc2:	4689      	mov	r9, r1
 8003bc4:	4692      	mov	sl, r2
 8003bc6:	eb1b 0509 	adds.w	r5, fp, r9
 8003bca:	eb4c 060a 	adc.w	r6, ip, sl
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	f04f 0400 	mov.w	r4, #0
 8003be0:	0094      	lsls	r4, r2, #2
 8003be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be6:	008b      	lsls	r3, r1, #2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	4631      	mov	r1, r6
 8003bf0:	f7fc faf2 	bl	80001d8 <__aeabi_uldivmod>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b32      	ldr	r3, [pc, #200]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	2164      	movs	r1, #100	; 0x64
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	3332      	adds	r3, #50	; 0x32
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1a:	4498      	add	r8, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	469b      	mov	fp, r3
 8003c20:	f04f 0c00 	mov.w	ip, #0
 8003c24:	46d9      	mov	r9, fp
 8003c26:	46e2      	mov	sl, ip
 8003c28:	eb19 0309 	adds.w	r3, r9, r9
 8003c2c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c30:	4699      	mov	r9, r3
 8003c32:	46a2      	mov	sl, r4
 8003c34:	eb19 090b 	adds.w	r9, r9, fp
 8003c38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c50:	4689      	mov	r9, r1
 8003c52:	4692      	mov	sl, r2
 8003c54:	eb1b 0509 	adds.w	r5, fp, r9
 8003c58:	eb4c 060a 	adc.w	r6, ip, sl
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4619      	mov	r1, r3
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	f04f 0400 	mov.w	r4, #0
 8003c6e:	0094      	lsls	r4, r2, #2
 8003c70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c74:	008b      	lsls	r3, r1, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	f7fc faab 	bl	80001d8 <__aeabi_uldivmod>
 8003c82:	4603      	mov	r3, r0
 8003c84:	460c      	mov	r4, r1
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2164      	movs	r1, #100	; 0x64
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	3332      	adds	r3, #50	; 0x32
 8003c9c:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <UART_SetConfig+0x6f4>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4442      	add	r2, r8
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	e7ff      	b.n	8003cb2 <UART_SetConfig+0x6e2>
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbc:	40011000 	.word	0x40011000
 8003cc0:	40011400 	.word	0x40011400
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	4e0d      	ldr	r6, [pc, #52]	; (8003d00 <__libc_init_array+0x38>)
 8003ccc:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cce:	1ba4      	subs	r4, r4, r6
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	42a5      	cmp	r5, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	4e0b      	ldr	r6, [pc, #44]	; (8003d08 <__libc_init_array+0x40>)
 8003cda:	4c0c      	ldr	r4, [pc, #48]	; (8003d0c <__libc_init_array+0x44>)
 8003cdc:	f000 f820 	bl	8003d20 <_init>
 8003ce0:	1ba4      	subs	r4, r4, r6
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	2500      	movs	r5, #0
 8003ce6:	42a5      	cmp	r5, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf0:	4798      	blx	r3
 8003cf2:	3501      	adds	r5, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cfa:	4798      	blx	r3
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08003d58 	.word	0x08003d58
 8003d04:	08003d58 	.word	0x08003d58
 8003d08:	08003d58 	.word	0x08003d58
 8003d0c:	08003d5c 	.word	0x08003d5c

08003d10 <memset>:
 8003d10:	4402      	add	r2, r0
 8003d12:	4603      	mov	r3, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
